openapi: 3.0.3
info:
  title: To-Do API
  description: API for a simple To-Do application
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
tags:
  - name: Tasks
    description: Operations related to tasks
  - name: Tags
    description: Operations related to tags
paths:
  /todo/{userId}/tasks:
    post:
      tags:
        - Tasks
      summary: Create a new task for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTask'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    get:
      tags:
        - Tasks
      summary: Get all tasks for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /todo/{userId}/tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get a task by ID for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    patch:
      tags:
        - Tasks
      summary: Update a task by ID for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTask'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    delete:
      tags:
        - Tasks
      summary: Delete a task by ID for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully
  /todo/{userId}/tags:
    get:
      tags:
        - Tags
      summary: Get all tags
      responses:
        '200':
          description: List of tags retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /todo/{userId}/tags/{tagId}:
    get:
      tags:
        - Tags
      summary: Get a tag by ID
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tag retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
    delete:
      tags:
        - Tags
      summary: Delete a tag by ID
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Tag deleted successfully
components:
  schemas:
    Task:
      type: object
      properties:
        task_id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - pending
            - in_progress
            - completed
        due_date:
          type: string
          format: date-time
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    NewTask:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date-time
    UpdateTask:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - pending
            - in_progress
            - completed
        due_date:
          type: string
          format: date-time
    Tag:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        task_id:
          type: integer
        name:
          type: string
    NewTag:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    TaskTag:
      type: object
      required:
        - tag_id
      properties:
        tag_id:
          type: integer
